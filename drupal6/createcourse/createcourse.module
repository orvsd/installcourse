<?php
/**
 * @file
 * createcourse module
 * Creates Moodle courses through the orvsd moodle web service
 */

// include the curl class
require_once('curl.php');

// @todo move this to the main drupal config
define('COURSE_FILE_PATH', '/ORVSD/');
define('MOODLE_WS_TOKEN', '13f6df8a8b66742e02f7b3791710cf84');
define('MOODLE_WS_FUNCTION', 'local_orvsd_create_course');

/**
 * Implements hook_enable
 * when module is enabled, setup the profile fields
 */
function createcourse_enable() {
  createcourse_update_profile_fields();
}

/**
 * hook_menu()
 */
function createcourse_menu() {
  $items = array();
  global $user, $server;
  $items['createcourse'] = array(
    'title' => 'ORVSD Course Creation',
    'page callback' => 'createcourse_page',
    'access arguments' => array('create courses'),
  );
  $items['createcourse/my'] = array(
    'title' => 'My Moodle',
    'page callback' => 'createcourse_page',
    'access arguments' => array('create courses'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * hook_perm()
 */
function createcourse_perm() {
  return array('create courses');
}

/**
 * hook_cron()
 * We want to make sure the list of schools in the profile field
 * drop-down is always up to date.
 */
function createcourse_cron() {
  createcourse_update_profile_fields();
}

/**
 * the main createcourse page
 */
function createcourse_page() {

  $output = t('');
  global $user;
  profile_load_profile($user);

  // Set up $server variable to contain school server's domain name
  $server = false;
  $schools = createcourse_schoollist();
  $courselist = createcourse_courselist();

  if(empty($user->profile_school) || ($user->profile_school == '--')) {
    drupal_set_message(t("You must select a school from the drop-down menu in your profile to use this form."), 'error');
    return $output;
  }

  $create_args = explode("createcourse/", $_GET['q']);

  if(!empty($schools[$user->profile_school])) {
    $server = $schools[$user->profile_school]['baseurl'];
  } else {
    drupal_set_message(t("Your school's site is not available for this function. Either it has not been created, or it is not a Moodle 2 site."), 'error');
    return $output;
  }

  if ($_GET['q'] == "createcourse/my" && $server) {
    $output = "Go to <a href='$server/my'>My Moodle</a> now.";
    return $output;
  }

  if (!empty($create_args[1])) {
    $course = $create_args[1];
    $course = htmlentities($course);
  } else {
    $output .= drupal_get_form('createcourse_createform', $server, $courselist);
    $output .= "Course creation may take a few minutes, please wait until the page reloads.";
    return $output;
  }

  // User must be logged in to create courses
  if (!$user->uid) {
    form_set_error('user_name', t("You are not logged in.  Please <a href='user'>log in</a> to create a course."));
    return $output;
  } 

  $output .= "Go to <a href='$server/my'>My Moodle</a> now.";
  return $output;
}

/**
 * Defines form
 */
function createcourse_createform(&$form_state, $server, $courselist) {
  global $user;
  $form['template_options'] = array(
    '#type' => 'value',
    '#value' => $courselist
  );
  $form['server'] = array(
    '#type' => 'value',
    '#value' => $server
  );
  $form['course_template'] = array(
    '#title' => t('Course template'),
    '#type' => 'select',
    '#description' => t('Please select the course template you would like to use for your new course.'),
    '#options' => $form['template_options']['#value'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create!'),
  );
  return $form;
}

/**
 *  Validate form
 */
function createcourse_createform_validate($form, &$form_state) {
  if (!$form_state['values']['course_template']) {
    // Validation fail
    form_set_error('course_template', t('FAIL!'));
  }
}

/**
 *  Post-validation form submission
 */
function createcourse_createform_submit($form, &$form_state) {
  global $user;
  $courseid = $form_state['values']['course_template'];
  drupal_set_message(t("Creating course from template"));
  $destination = createcourse_create($courseid, $form_state['values']['server']);
  $form_state['redirect'] = $destination;
}

function createcourse_create($courseid, $server) {
  global $user;

  // grab the course info from the db
  db_set_active('orvsd');

  $query_course = "SELECT * FROM courses WHERE course_id = $courseid";
  $course = db_fetch_array(db_query($query_course));

  db_set_active('default');

  profile_load_profile($user);
  $firstname = urlencode($user->profile_firstname);
  $lastname = urlencode($user->profile_lastname);
  $username = $user->name;
  $school = $user->profile_school;
  $city = $user->profile_city;
  $email = $user->mail;
  $pass = $user->pass;

  // build the parameters for the moodle webservice
  $restformat = 'json'; 
  $course1 = array();
  $course1['filepath'] = COURSE_FILE_PATH;
  $course1['file'] = $course['filename'];
  $course1['courseid'] = $course['course_id'];
  $course1['coursename'] = $course['name'];
  $course1['shortname'] = $course['shortname'];
  $course1['category'] = 1;
  $course1['firstname'] = $firstname;
  $course1['lastname'] = $lastname;
  $course1['city'] = $city;
  $course1['username'] = $username;
  $course1['email'] = $email;
  $course1['pass'] = $pass;

//  header('Content-Type: text/plain');
  $serverurl = sprintf('%s/webservice/rest/server.php?wstoken=%s&wsfunction=%s', 
                        $server, MOODLE_WS_TOKEN, MOODLE_WS_FUNCTION);

  $curl = new curl;
  $curlurl = sprintf("%s&moodlewsrestformat=json", $serverurl);
  $resp = $curl->post($curlurl, $course1);

  drupal_set_message($resp);

  $destination = "createcourse/my";
  $watchdog_report = sprintf("%s created course %s on %s", 
                              $username, $course['name'], $server );
  
  watchdog('createcourse', $watchdog_report);

  $form_state['redirect'] = $destination;

  return $destination;
}

/** 
 * Grab the list of available courses from the orvsd_central db
 * return array course list
 */
function createcourse_courselist() {
  db_set_active('orvsd');

  $query_course_list = "SELECT * FROM courses";
  $result = db_query($query_course_list);

  db_set_active('default');

  $courselist = array();
  while ($row = db_fetch_array($result)) {
    $courselist[$row['course_id']] = $row['name'];
  }
  
  ksort($courselist);
  $courselist = array('blank' => 'Empty course') + $courselist;

  return $courselist;
}

/* createcourse_schoollist()
 * returns array() - list of schools with their site paths, urls, 
 * and district
 *
 */ 
function createcourse_schoollist() {
  try { 
    db_set_active('orvsd');
  } catch (Exception $e) {
    drupal_set_message($e->getMessage()); 
  }

  $query = "SELECT schools.id, 
                   schools.name AS school_name,
                   districts.name AS district_name, 
                   sites.baseurl, 
                   sites.basepath,
                   sites.sitetype,
                   site_details.siterelease
              FROM districts 
              LEFT JOIN schools
                ON districts.id=schools.district_id
              LEFT JOIN sites
                ON (schools.id=sites.school_id 
                    AND sites.sitetype='moodle')
              JOIN site_details
                ON (sites.id=site_details.site_id 
                    AND site_details.siterelease LIKE '2.2%')";

  $schools = array();
  $result = db_query($query);
  
  while ($row = db_fetch_array($result)) {
    $schools[$row['school_name']] = $row;
  }

  db_set_active('default');
  return $schools;
}

/** 
 * generate the list of options for the profile school list
 * drop-down
 */
function createcourse_update_profile_fields() {

  $names = array('--');
  
  db_set_active('orvsd');

  $query = "SELECT schools.name FROM {schools} WHERE 1 ORDER BY schools.name ASC";
  $result = db_query($query);
  while ($field = db_fetch_object($result)) {
    $names[]=$field->name;
  }

  $options = join("\r\n", $names);

  db_set_active('default');

  $fields = array(
    0, array(
          'title' => 'School',
          'name' => 'profile_school',
          'explanation' => "User's primary school affiliation",
          'category' => 'User',
          'type' => 'selection',
          'weight' => -10,
          'required' => 1,
          'register' => 1,
          'visibility' => 2,
          'autocomplete' => 1,
          'options' => $options,
          'page' => ''
        ),
    1, array(
          'title' => 'City',
          'name' => 'profile_city',
          'explanation' => "User's city",
          'category' => 'User',
          'type' => 'textfield',
          'weight' => -10,
          'required' => 1,
          'register' => 1,
          'visibility' => 2,
          'autocomplete' => 1,
          'options' => '',
          'page' => ''
        ));

    foreach($fields as $field) {
      
      $exists = db_result(db_query('SELECT 1 FROM profile_fields WHERE name="' . $field['name'] . '"'));
      if(!$exists) {
        db_query("INSERT INTO {profile_fields} (title, name, explanation, category, type, weight, required, register, visibility, autocomplete, options, page) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, '%s', '%s')",
              $field['title'],
              $field['name'],
              $field['explanation'],
              $field['category'],
              $field['type'],
              $field['weight'],
              $field['required'],
              $field['register'],
              $field['visibility'],
              $field['autocomplete'],
              $field['options'],
              $field['page']
            );

      watchdog('profile', 'Profile field %field added under category %category.', array('%field' => $field['title'], '%category' => $field['category']), WATCHDOG_NOTICE, l(t('view'), 'admin/user/profile'));
    } else {
      // field exists, so just update the school list options
      db_query("UPDATE {profile_fields} SET options = '%s' WHERE title = '%s'", $options, 'School');
    }
  }
  cache_clear_all();
  menu_rebuild();
}


